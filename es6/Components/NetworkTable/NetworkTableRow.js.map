{"version":3,"file":"NetworkTableRow.js","sources":["../../../src/Components/NetworkTable/NetworkTableRow.tsx"],"sourcesContent":["// @ts-nocheck\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nimport { VIEWER_FIELDS, ROW_ID_PREFIX } from './../../constants';\nimport Styles from './NetworkTableHeader.styles.scss';\nimport TimeChart from './TimeChart';\nimport NetworkCellValue from './NetworkCellValue';\nimport { getStatusClass } from '../../utils';\n\nconst context = classNames.bind(Styles);\n\nconst NetworkTableRow = ({\n  payload,\n  maxTime,\n  scrollHighlight,\n  onSelect,\n}) => {\n  const handleSelectRequest = () => {\n    onSelect(payload);\n  };\n\n  const rowProps = {\n    className: context(\n      'network-table-row',\n      getStatusClass(payload), {\n        highlight: scrollHighlight,\n      }),\n    id: ROW_ID_PREFIX + payload.index,\n    onClick: handleSelectRequest,\n  };\n\n  return (\n    <tr {...rowProps}>\n      {Object.entries(VIEWER_FIELDS).map(([datakey, { key, unit }]) => (\n        <NetworkCellValue\n          key={datakey}\n          datakey={key}\n          payload={payload}\n          unit={unit}\n        />\n      ))}\n      <td className={Styles['timeline-header']}>\n        {payload.time ? (\n          <TimeChart\n            maxTime={maxTime}\n            timings={payload.timings}\n          />\n        ) : ''}\n      </td>\n    </tr>\n  );\n};\n\nNetworkTableRow.propTypes = {\n  maxTime: PropTypes.number.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  payload: PropTypes.object.isRequired,\n  scrollHighlight: PropTypes.bool.isRequired,\n};\n\nexport default NetworkTableRow;\n"],"names":["context","classNames","bind","Styles","NetworkTableRow","payload","maxTime","scrollHighlight","onSelect","handleSelectRequest","rowProps","className","getStatusClass","highlight","id","ROW_ID_PREFIX","index","onClick","Object","entries","VIEWER_FIELDS","map","datakey","key","unit","time","timings","propTypes","PropTypes","number","isRequired","func","object","bool"],"mappings":";;;;;;;;;;AAWA,IAAMA,OAAO,GAAGC,UAAU,CAACC,IAAX,CAAgBC,MAAhB,CAAhB,CAAA;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAKlB,IAAA,EAAA;EAAA,IAJJC,OAII,QAJJA,OAII;MAHJC,OAGI,QAHJA,OAGI;MAFJC,eAEI,QAFJA,eAEI;MADJC,QACI,QADJA,QACI,CAAA;;AACJ,EAAA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;IAChCD,QAAQ,CAACH,OAAD,CAAR,CAAA;GADF,CAAA;;AAIA,EAAA,IAAMK,QAAQ,GAAG;IACfC,SAAS,EAAEX,OAAO,CAChB,mBADgB,EAEhBY,cAAc,CAACP,OAAD,CAFE,EAES;AACvBQ,MAAAA,SAAS,EAAEN,eAAAA;AADY,KAFT,CADH;AAMfO,IAAAA,EAAE,EAAEC,aAAa,GAAGV,OAAO,CAACW,KANb;AAOfC,IAAAA,OAAO,EAAER,mBAAAA;GAPX,CAAA;EAUA,oBACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAQC,QAAR,EACGQ,MAAM,CAACC,OAAP,CAAeC,aAAf,CAA8BC,CAAAA,GAA9B,CAAkC,UAAA,KAAA,EAAA;AAAA,IAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,QAAEC,OAAF,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,QAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;QAAaC,GAAb,UAAaA,GAAb;QAAkBC,IAAlB,UAAkBA,IAAlB,CAAA;;AAAA,IAAA,oBACjC,oBAAC,gBAAD,EAAA;AACE,MAAA,GAAG,EAAEF,OADP;AAEE,MAAA,OAAO,EAAEC,GAFX;AAGE,MAAA,OAAO,EAAElB,OAHX;AAIE,MAAA,IAAI,EAAEmB,IAAAA;KALyB,CAAA,CAAA;AAAA,GAAlC,CADH,eASE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAI,SAAS,EAAErB,MAAM,CAAC,iBAAD,CAAA;AAArB,GAAA,EACGE,OAAO,CAACoB,IAAR,gBACC,oBAAC,SAAD,EAAA;AACE,IAAA,OAAO,EAAEnB,OADX;IAEE,OAAO,EAAED,OAAO,CAACqB,OAAAA;GAHpB,CAAA,GAKG,EANN,CATF,CADF,CAAA;AAoBD,EAxCD;;AA0CAtB,eAAe,CAACuB,SAAhB,GAA4B;AAC1BrB,EAAAA,OAAO,EAAEsB,SAAS,CAACC,MAAV,CAAiBC,UADA;AAE1BtB,EAAAA,QAAQ,EAAEoB,SAAS,CAACG,IAAV,CAAeD,UAFC;AAG1BzB,EAAAA,OAAO,EAAEuB,SAAS,CAACI,MAAV,CAAiBF,UAHA;AAI1BvB,EAAAA,eAAe,EAAEqB,SAAS,CAACK,IAAV,CAAeH,UAAAA;AAJN,CAA5B;;;;"}