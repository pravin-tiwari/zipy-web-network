{"version":3,"file":"actions.js","sources":["../../../src/state/network/actions.ts"],"sourcesContent":["import axios from 'axios';\n\nimport * as types from './types';\n\nexport const updateData = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_DATA,\n  payload,\n});\n\nexport const updateSearch = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_SEARCH,\n  payload,\n});\n\nexport const updateSort = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_SORT,\n  payload,\n});\n\nexport const updateFilter = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_FILTER,\n  payload,\n});\n\nexport const updateErrorFilter = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_ERROR_FILTER,\n  payload,\n});\n\nexport const fetchFileRequest = (dispatch) => (payload) => dispatch({\n  type: types.FETCH_FILE.REQUEST, payload,\n});\n\nexport const fetchFileSuccess = (dispatch) => (payload) => dispatch({\n  type: types.FETCH_FILE.SUCCESS, payload,\n});\n\nexport const fetchFileFailure = (dispatch) => (payload) => dispatch({\n  type: types.FETCH_FILE.FAILURE, payload,\n});\n\nexport const updateErrorMessage = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_ERROR_MESSAGE, payload,\n});\n\nexport const updateScrollToIndex = (dispatch) => (payload) => dispatch({\n  type: types.UPDATE_SCROLL_TO_INDEX, payload,\n});\n\nexport const selectRequest = (dispatch) => (payload) => dispatch({\n  type: types.SELECT_REQUEST, payload,\n});\n\nexport const resetState = (dispatch) => (payload) => dispatch({\n  type: types.RESET, payload,\n});\n\nexport const fetchFile = (dispatch) => (file, options = { withCredentials: true }) => {\n  fetchFileRequest(dispatch)();\n  axios.get(file, options)\n    .then(({ data }) => {\n      if (data && data.log) {\n        updateData(dispatch)(data.log);\n      }\n      fetchFileSuccess(dispatch)();\n    })\n    .catch((error) => fetchFileFailure(dispatch)({\n      title: 'Error while fetching file',\n      description: error.message,\n    }));\n};\n"],"names":["updateData","dispatch","payload","type","types","updateSearch","updateSort","updateFilter","updateErrorFilter","fetchFileRequest","REQUEST","fetchFileSuccess","SUCCESS","fetchFileFailure","FAILURE","updateErrorMessage","updateScrollToIndex","selectRequest","resetState","fetchFile","file","options","withCredentials","axios","get","then","data","log","error","title","description","message"],"mappings":"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"}